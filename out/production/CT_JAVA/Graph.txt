< 그래프 >
 - V: 접점, E: 간선
 - 그래프는 인접행렬과 인접 리스트로 표현할 수 있다.
 - 주로 인접 리스트를 사용

  [인접 행렬]
   - V * V 행렬을 만들어 정점간 간선이 존재하면 1 아니면 0;
   - int[][] adj = new int[V][V];

  [인접 리스트]
   - 간선만큼의 리스트를 생성 한 후 정점별 연결되어 있는 접점을 표현현
  - ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
   - adj.get(0) = {3,4,5}; // 1번 종점은 3,4,5 와 연결
   - adj.get(1) = {5}; // 2번 정점은 5 와 연결


< 그래프 탐색 >
 - 대표적으로 깊이우선탐색(DFS), 너비우선탐색(BFS)이 있다.

  [ DFS ]
   - 주로 재귀함수를 사용해서 탐색을 한다.
   // x를 갈 수 있다는 것을 알고 방문한 상태
   static void dfs(int x){
    // x를 방문했다.
    visit[x] = true;
    //x에서 갈 수 있는 곳들을 모두 방문한다.
    for( int y : x에서 갈 수 있는 점들){
        if(visit[y]){ // y를 방문했다면 for문 건너뛰기
            continue;
        }
        dfs(y);
    }
   }

   public static void main(String[] args){
    bfg(5)
   }

  [ BFS ]
   - Queue를 사용해서 탐색한다.

   static void bfs(int start){
    Queue<Integer> que = new LinkedList<>();

    //start는 방문 가능한 점이므로 que에 넣어준다.
    que.add(start);
    visit[start] = true;

    while(!que.isEmpty()){ // que가 빌때까지 반복
        int x = que.poll();
        for(int y: x에서 갈 수 있는 점들){
            if(visit[y]) continue; // 이미 방문한 점이면 무시

            que.add(y);
            visit[y] = true;
        }
    }
   }
